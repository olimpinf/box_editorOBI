# This config requires the following Ubuntu packages to be installed:
# nginx-full php7.2-cgi php7.2-fpm phppgadmin

user www-data;

pid /run/nginx.pid;

# Raise the three following values if you expect a very high load.
worker_processes 4;
worker_rlimit_nofile 1024;
events {
    worker_connections 768;
    multi_accept on;
}

http {
    # Default Ubuntu 13.10 settings.
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    proxy_headers_hash_max_size 1024;
    proxy_headers_hash_bucket_size 128;
    
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # Default Ubuntu 13.10 settings for gzip (uncommented).
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

    # Group the ContestWebServers to load balance the users' requests
    # on them. The "ip_hash" option is necessary for the notifications
    # to work.
    upstream cws {
        ip_hash;
        keepalive 500;
        server 127.0.0.1:8888;
        server 127.0.0.1:8887;
        server 127.0.0.1:8886;
        server 127.0.0.1:8885;
        server 127.0.0.1:8884;
        server 127.0.0.1:8883;
        server 127.0.0.1:8882;
        server 127.0.0.1:8881;
        server 127.0.0.1:8880;
        server 127.0.0.1:8879;
        server 127.0.0.1:8878;
        server 127.0.0.1:8877;
        server 127.0.0.1:8876;
        server 127.0.0.1:8875;
        server 127.0.0.1:8874;
        server 127.0.0.1:8873;
        server 127.0.0.1:8872;
        server 127.0.0.1:8871;
        server 127.0.0.1:8870;
        server 127.0.0.1:8869;
        # Insert other CWSs here.
    }

    # To benefit from kept-alive connections also on AdminWebServer a
    # group for it has to be created as well, even if it will contain
    # just one server.
    upstream aws {
        keepalive 5;
        server 127.0.0.1:8889;
    }

    # Group the RankingWebServers to load balance among them (useful to
    # overcome the hard limit on simultaneous open file descriptors if
    # you expect a very large number of clients).
    upstream rws {
        keepalive 500;
        server 127.0.0.1:8890;
        # Insert other RWSs here.
    }

    # Force HTTPS.
    server {
        listen 80;
        server_name ioi-server;
        location / {
            rewrite ^/(.*)$ https://ioi-server/$1;
        }
    }

    server {
        # comment for contest
	# listen 80;
        # server_name 18.231.15.149;
	
        # uncomment for contest
        server_name pj.provas.ic.unicamp.br;

        # Serve AWS on a prefix.
        location /aws/ {
            proxy_pass http://aws/;
            include proxy_params;
            proxy_redirect / /aws/;
            proxy_redirect http://$host/ /aws/;
            proxy_redirect https://$host/ /aws/;
            proxy_http_version 1.1;
            proxy_set_header Connection "";

            # Protect it with an authentication. For more information
            # see http://wiki.nginx.org/HttpAuthBasicModule.
            #auth_basic "AdminWebServer";
            #auth_basic_user_file /etc/nginx/htpasswd_AWS;

            # Protect it with an IP address whitelist.
            allow 127.0.0.1;
            # Insert other allowed IP addesses or subnets here.
	    allow 143.106.0.0/16;   # unicamp
	    allow 179.87.214.128/32;  # mateus 
            deny all;

            # Allow to upload large files (e.g. testcases).
            client_max_body_size 100M;
        }

        # Serve RWS on a prefix.
        location /rws/ {
            proxy_pass http://rws/;
            include proxy_params;
            proxy_redirect / /rws/;
            proxy_redirect http://$host/ /rws/;
            proxy_redirect https://$host/ /rws/;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            # Buffering blocks the streaming HTTP requests used for
            # live-update.
            proxy_buffering off;

            # Protect it with an authentication. For more information
            # see http://wiki.nginx.org/HttpAuthBasicModule.
            auth_basic "RankingWebServer";
            auth_basic_user_file /etc/nginx/htpasswd_RWS;

            # Protect it with an IP address whitelist.
            allow 127.0.0.1;
            # Insert other allowed IP addesses or subnets here.
            deny all;
        }

        # ranido-begin
        include /etc/nginx/mime.types;

	# Redirect /editor -> /editor/ (adds trailing slash)
	location = /editor {
	    return 301 /editor/;
	}

	# Serve the static app from /var/www/html when path starts with /editor/
	# Use alias (not root) so /editor/... maps to /var/www/html/...
	location ^~ /editor/ {
            alias /var/www/html/;
            index index.html;

            # SPA-style routing: if a file isn't found, serve index.html
            try_files $uri $uri/ /index.html;

            # Optional: decent caching for static assets
            #location ~* \.(js|css|png|jpg|jpeg|svg|ico|woff2?)$ {
            #    expires 7d;
            #    add_header Cache-Control "public, max-age=604800";
       	    #    try_files $uri =404;
    	    #}
        }
	# ranido-end

        # Serve CWS unprefixed.
        location / {
	# ranido-begin
            #proxy_pass http://cws;
            proxy_pass http://cws/api/;
	# ranido-end
            include proxy_params;
            proxy_http_version 1.1;
            proxy_set_header Connection "";

            # Needs to be as large as the maximum allowed submission
            # and input lengths set in cms.conf.
            client_max_body_size 50M;
        }

    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/pj.provas.ic.unicamp.br/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/pj.provas.ic.unicamp.br/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}


    server {
    if ($host = pj.provas.ic.unicamp.br) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


        server_name pj.provas.ic.unicamp.br;
    listen 80;
    return 404; # managed by Certbot


}}
